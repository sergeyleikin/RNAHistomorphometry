//Clear Log, close open images, clear ROIManager
print("\\Clear");
close("*");
nROIR = roiManager("count");
if (nROIR > 0) {
    roiManager("Deselect");
    roiManager("Delete");
};
else {};
//Set directory and open image
path = getDirectory("Choose a Directory");
open();
CropFile = File.nameWithoutExtension;
CropF = CropFile + ".tif";
//Set analysis parameters
GFPT0 = getNumber("Set initial Col threshold", 2000);
CTSKT0 = getNumber("Set initial Ctsk threshold", 2000);
ThrRCol = getNumber("Set Col1a1 threshold ratio", 5);
ThrRCtsk = getNumber("Set Ctsk threshold ratio", 5);
Msize = getNumber("Set minimum cell size, um^2", 5);
BWidth = getNumber("Set line width, um", 12);
ASat = getNumber("Set maximum %Area at upper threshold", 5)/100;
run("Options...", "iterations=3 count=1 black do=Nothing");
//Define image file names
ColF = CropFile + "_Col_16bit.tif";
ColFile = path + ColF;
CtskF = CropFile + "_Ctsk_16bit.tif";
CtskFile = path + CtskF;
ROIMFile = path + "RoiSet.zip";
//Col1a1 and Ctsk file extraction
selectWindow(CropF);
getPixelSize(unit, pixelWidth, pixelHeight);
BWidth = round(BWidth/pixelWidth);
Msize = round(Msize/(pixelWidth^2));
run("Split Channels");
close("C3-"+CropF);
selectWindow("C1-"+CropF);
setMinAndMax(0, 65535);
run("Grays");
run("Apply LUT");
saveAs("Tiff", CtskFile);
selectWindow("C2-"+CropF);
setMinAndMax(0, 65535);
run("Grays");
run("Apply LUT");
saveAs("Tiff", ColFile);
//Clearing images outside bone surface regions
selectWindow(ColF);
run("Duplicate...", "title=Mask");
run("Grays");
run("Colors...", "foreground=black background=black selection=yellow");
run("Select All");
run("Fill", "slice");
run("Colors...", "foreground=white background=black selection=yellow");
roiManager("Open", ROIMFile);
roiManager("Set Line Width", BWidth*2);
roiManager("Deselect");
roiManager("AND");
roiManager("Draw");
roiManager("Deselect");
roiManager("Delete");
setThreshold(65535, 65535);
run("Create Selection");
selectWindow(CtskF);
run("Restore Selection");
run("Clear Outside");
selectWindow(ColF);
run("Restore Selection");
run("Clear Outside");
close("Mask");
//Col1a1 threshold calculation
setThreshold(GFPT0, 65535);
run("Create Selection");
setMinAndMax(0, 65535);
run("Clear Results");
run("Set Measurements...", "area redirect=None decimal=3");
run("Measure");
close("Mask*.*");
ColA = getResult("Area", 0);
ColMax = minOf(round(1.05*getValue("Max")),65535);
run("Clear Results");
ColT = 1.2*GFPT0;
Tol = 0.0001;
selectWindow(ColF);
while (abs(ColT/GFPT0-1) > 0.001) {
	GFPT0 = ColT;
	ColUT1 = GFPT0;
	ColUT2 = ColMax;
	setThreshold(GFPT0, 65535);
	run("Create Selection");
	run("Clear Results");
	run("Measure");
	ColA = getResult("Area", 0);
	ColAT = ColA;
	while (abs(ColAT/(ColA*ASat)-1) > Tol) {
		ColT2 = (ColUT1+ColUT2)/2;
		setThreshold(ColT2, 65535);
		run("Create Selection");
		run("Clear Results");
		run("Measure");
		ColAT = getResult("Area", 0);
		if (ColAT/ColA >= ASat) {
			ColUT1 = ColT2;
		};
		else {
			ColUT2 = ColT2;
		};
		if (abs(ColUT2-ColUT1) < 1) {
			Tol = abs(ColAT/(ColA*ASat)-1)+0.0001;
		};
		else {};
	};
	ColT = round(ColT2/ThrRCol);
	setThreshold(ColT, 65535);
	run("Create Selection");
	run("Clear Results");
	run("Measure");
	ColA = getResult("Area", 0);
	print("ColT/GFPT0 = "+ColT/GFPT0);
};
//Ctsk threshold calculation
selectWindow(CtskF);
setThreshold(CTSKT0, 65535);
run("Create Selection");
setMinAndMax(0, 65535);
run("Clear Results");
run("Set Measurements...", "area redirect=None decimal=3");
run("Measure");
close("Mask*.*");
CtskA = getResult("Area", 0);
CtskMax = minOf(round(1.05*getValue("Max")),65535);
run("Clear Results");
selectWindow(CtskF);
CtskT = 1.2*CTSKT0;
Tol = 0.0001;
selectWindow(CtskF);
while (abs(CtskT/CTSKT0-1) > 0.001) {
	CTSKT0 = CtskT;
	CtskUT1 = CTSKT0;
	CtskUT2 = CtskMax;
	setThreshold(CTSKT0, 65535);
	run("Create Selection");
	run("Clear Results");
	run("Measure");
	CtskA = getResult("Area", 0);
	CtskAT = CtskA;
	while (abs(CtskAT/(CtskA*ASat)-1) > Tol) {
		CtskT2 = (CtskUT1+CtskUT2)/2;
		setThreshold(CtskT2, CtskMax);
		run("Create Selection");
		run("Clear Results");
		run("Measure");
		CtskAT = getResult("Area", 0);
		if (CtskAT/CtskA >= ASat) {
			CtskUT1 = CtskT2;
		};
		else {
			CtskUT2 = CtskT2;
		};
		if (abs(CtskUT2-CtskUT1) < 1) {
			Tol = abs(CtskAT/(CtskA*ASat)-1)+0.001;
		};
		else {};
	};
	CtskT = round(CtskT2/ThrRCtsk);
	setThreshold(CtskT, CtskMax);
	run("Create Selection");
	run("Clear Results");
	run("Measure");
	CtskA = getResult("Area", 0);
	print("CtskT/CTSKT0 = "+CtskT/CTSKT0);
};
print("ColAT/ColA = "+ColAT/ColA);
print("CtskAT/CtskA = "+CtskAT/CtskA);
//Col1a1 and Ctsk Mask generation
ColM = CropFile + "_ColM_" + ColT + "t.tif";
ColMFile = path + ColM;
CtskM = CropFile + "_CtskM_" + CtskT + "t.tif";
CtskMFile = path + CtskM;
selectWindow(ColF);
setThreshold(ColT, 65535);
run("Analyze Particles...", "size=Msize-Infinity pixel show=Masks");
run("Invert LUT");
run("Close-");
saveAs("Tiff", ColMFile);
selectWindow(CtskF);
setThreshold(CtskT, 65535);
run("Analyze Particles...", "size=Msize-Infinity pixel show=Masks");
run("Invert LUT");
run("Close-");
saveAs("Tiff", CtskMFile);
close(ColM);
close(CtskM);
//Ob.S./B.S and Oc.S./B.S. measurement
nROIR = roiManager("count");
if (nROIR > 0) {
    roiManager("Deselect");
    roiManager("Delete");
};
setOption("BlackBackground", true);
var BoneP=0;
var ObLengthP=0;
var OcLengthP=0;
roiManager("Open", ROIMFile);
roiManager("Set Line Width", BWidth);
roiManager("Deselect");
roiManager("Show None");
nROIs = roiManager("count");
IBoneP=0;
IObLengthP=0;
IOcLengthP=0;
for (i = 0; i < nROIs; i++) {
    selectWindow(CtskF);
    roiManager("Select", i);
    getLine(x1, y1, x2, y2, lineWidth);
    run("Straighten...");
    setThreshold(CtskT, 65535);
	run("Analyze Particles...", "size=Msize-Infinity pixel show=Masks");
	run("Invert LUT");
 	run("Close-");
 	run("Bin...", "x=1 y=lineWidth bin=Max");
    getStatistics(area, mean, min, max);
    nPix = getWidth();
    CellLengthP=(mean*nPix/255);
    IOcLengthP=IOcLengthP+CellLengthP;
    close("*-1.tif");
    IBoneP=IBoneP+nPix;
    setMinAndMax(0, 65535);
};
for (i = 0; i < nROIs; i++) {
    selectWindow(ColF);
    roiManager("Select", i);
    getLine(x1, y1, x2, y2, lineWidth);
    run("Straighten...");
    setThreshold(ColT, 65535);
	run("Analyze Particles...", "size=Msize-Infinity pixel show=Masks");
	run("Invert LUT");
 	run("Close-");
    run("Bin...", "x=1 y=lineWidth bin=Max");
    getStatistics(area, mean, min, max);
    nPix = getWidth();
    CellLengthP=(mean*nPix/255);
    IObLengthP=IObLengthP+CellLengthP;
    close("*-1.tif");
    setMinAndMax(0, 65535);
};
roiManager("Deselect");
roiManager("Delete");
BoneP=IBoneP;
ObLengthP=IObLengthP;
OcLengthP=IOcLengthP;
getPixelSize(unit, pixelWidth, pixelHeight);
print ("Pixel size", pixelWidth, "x", pixelHeight);
print("% Area at Max intensity: "+ASat*100);
print("Col1a1 threshold ratio: "+ThrRCol, "; Ctsk threshold ratio: "+ThrRCtsk);
print("Col1a1 threshold: "+ColT, "; Ctsk threshold: "+CtskT);
TBonePerim=BoneP*pixelWidth;
print("Bone Perimeter (um):");
print(TBonePerim);
TObLength=ObLengthP*pixelWidth;
print("Ob-Bone Contact Perimeter (um):");
print(TObLength);
TOcLength=OcLengthP*pixelWidth;
print("Oc-Bone Contact Perimeter (um):");
print(TOcLength);
selectWindow("Log");
saveAs("Text", path+"Auto_Thr.txt");
close("*");
